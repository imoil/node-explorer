/**
 * @description Nuxt.js ÏÑúÎ≤ÑÏóê WebSocket Í∏∞Îä•ÏùÑ Ï∂îÍ∞ÄÌïòÎäî ÌîåÎü¨Í∑∏Ïù∏ÏûÖÎãàÎã§.
 * Ïã§ÏãúÍ∞Ñ ÏóÖÎç∞Ïù¥Ìä∏Î•º Î∞∞Ïπò(batch) Ï≤òÎ¶¨ÌïòÏó¨ ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏Ïóê Ï†ÑÏÜ°Ìï©ÎãàÎã§.
 */
import { WebSocketServer, WebSocket } from 'ws';
import type { IncomingMessage } from 'http';
import type { Duplex } from 'stream';

// Nuxt DevToolsÏóêÏÑú HMR(Hot Module Replacement)ÏùÑ ÏúÑÌïú WebSocketÍ≥º Ï∂©Îèå Î∞©ÏßÄ
// see: https://github.com/nuxt/nuxt/issues/22329
const VITE_WEBSOCKET_PATH = '/_nuxt';

// Ï†ÑÏó≠ WebSocket ÏÑúÎ≤Ñ Ïù∏Ïä§ÌÑ¥Ïä§ ÌÉÄÏûÖ Ï†ïÏùò
declare global {
  var wss: WebSocketServer | undefined;
}

export default defineNitroPlugin((nitroApp) => {
  // Í∞úÎ∞ú Î™®ÎìúÏóêÏÑúÎßå WebSocket ÏÑúÎ≤Ñ Ïã§Ìñâ
  if (!process.dev) {
    return;
  }

  // Ïù¥ÎØ∏ Ïã§Ìñâ Ï§ëÏù∏ ÏÑúÎ≤ÑÍ∞Ä ÏûàÏúºÎ©¥ Ïû¨ÏÇ¨Ïö©
  if (global.wss) {
    console.log('Reusing existing WebSocket server.');
    return;
  }
  
  // Nitro ÏÑúÎ≤Ñ(NuxtÏùò ÏÑúÎ≤Ñ ÏóîÏßÑ) Í∞ÄÏ†∏Ïò§Í∏∞
  const server = nitroApp.server.httpServer;
  if (!server) {
    console.error('WebSocket server could not be started: HTTP server is not available.');
    return;
  }

  console.log('Starting WebSocket server...');
  const wss = new WebSocketServer({ noServer: true });

  // ÏóÖÎç∞Ïù¥Ìä∏Î•º ÏûÑÏãú Ï†ÄÏû•Ìï† ÌÅê(Queue)
  let updateQueue: any[] = [];

  // 5Ï¥àÎßàÎã§ ÌÅêÏóê ÏåìÏù∏ ÏóÖÎç∞Ïù¥Ìä∏Îì§ÏùÑ Î∞∞ÏπòÎ°ú Î¨∂Ïñ¥ Î∏åÎ°úÎìúÏ∫êÏä§Ìä∏
  const broadcastInterval = setInterval(() => {
    // 0Í∞úÏóêÏÑú 5Í∞ú ÏÇ¨Ïù¥Ïùò ÎûúÎç§Ìïú ÏàòÏùò Í∞ÄÏÉÅ Ïù¥Î≤§Ìä∏Î•º ÏÉùÏÑ±ÌïòÏó¨ ÌÅêÏóê Ï∂îÍ∞Ä
    const eventCount = Math.floor(Math.random() * 6);
    if (eventCount > 0) {
      console.log(`‚ö°Ô∏è Generating ${eventCount} new update events.`);
      for (let i = 0; i < eventCount; i++) {
        // Mock DBÏóê ÏûàÎäî Ïã§Ï†ú ÎÖ∏Îìú ID Ï§ë ÌïòÎÇòÎ•º ÎûúÎç§ÌïòÍ≤å ÏÑ†ÌÉù
        const targetId = `node-1-1-${Math.floor(Math.random() * 3) + 1}`; // e.g., node-1-1-1
        updateQueue.push({
          id: targetId,
          newName: `UpdatedName-${Math.random().toString(36).substring(7)}`,
        });
      }
    }

    if (wss.clients.size > 0 && updateQueue.length > 0) {
      const batchMessage = {
        type: 'NODE_UPDATES_BATCH',
        payload: [...updateQueue],
      };
      
      console.log(`üì¢ Broadcasting batch of ${updateQueue.length} updates to ${wss.clients.size} clients.`);
      
      wss.clients.forEach(client => {
        if (client.readyState === WebSocket.OPEN) {
          client.send(JSON.stringify(batchMessage));
        }
      });
      updateQueue = []; // ÌÅê ÎπÑÏö∞Í∏∞
    }
  }, 5000);

  // ÏÑúÎ≤ÑÏùò 'upgrade' Ïù¥Î≤§Ìä∏Î•º Í∞ÄÎ°úÏ±ÑÏÑú WebSocket Ïó∞Í≤∞ Ï≤òÎ¶¨
  server.on('upgrade', (req: IncomingMessage, socket: Duplex, head: Buffer) => {
    // Nuxt/ViteÏùò HMR ÏöîÏ≤≠ÏùÄ Î¨¥Ïãú
    if (req.url?.startsWith(VITE_WEBSOCKET_PATH)) {
      return;
    }
    
    wss.handleUpgrade(req, socket, head, (ws) => {
      wss.emit('connection', ws, req);
    });
  });

  wss.on('connection', (ws: WebSocket) => {
    console.log(`‚úÖ Client connected. Total clients: ${wss.clients.size}`);
    ws.on('close', () => {
      console.log(`‚ùå Client disconnected. Total clients: ${wss.clients.size}`);
    });
  });

  // Nitro Ïï± Ï¢ÖÎ£å Ïãú WebSocket ÏÑúÎ≤ÑÏôÄ interval Ï†ïÎ¶¨
  nitroApp.hooks.hook('close', () => {
    console.log('Closing WebSocket server...');
    clearInterval(broadcastInterval);
    wss.close();
    global.wss = undefined;
  });

  global.wss = wss;
});

